Project: citizen_issue_app

This file summarizes the main files and folders in the Flutter project and describes which file contains which part and their responsibilities.

Top-level files
----------------
- `pubspec.yaml` - Package manifest. Declares project name, version, environment (Dart SDK), dependencies (flutter, camera, geolocator, geocoding, permission_handler, audioplayers, path_provider, etc.) and dev_dependencies (flutter_test, flutter_lints).
- `README.md` - Short project README created by Flutter. Contains basic getting-started links.

Flutter platform folders
------------------------
- `android/` - Android platform project and Gradle build files. Contains native Android configuration, Gradle wrapper and app-level build scripts. Important when modifying Android-specific permissions (e.g., microphone, camera, location) or native channels.
- `ios/` - iOS platform project. Contains Xcode project and iOS native plugin registration.
- `web/`, `macos/`, `linux/`, `windows/` - Platform-specific runner projects (auto-generated by Flutter). For platform-specific configuration when building for those targets.

Main Dart entry
---------------
- `lib/main.dart` - App entry point. Sets up `MaterialApp`, theme (uses `AppColors`), disables debug banner and sets `HomeScreen` as the initial route.

Constants (styling and colors)
-----------------------------
- `lib/constants/app_colors.dart` - Centralized color palette used throughout the UI (primaryGreen, lightGreen, gradients, status colors, background, text colors).
- `lib/constants/app_styles.dart` - Common text styles, card decorations and gradient BoxDecorations (used by feature cards, headers, etc.).

Color scheme (palette & hex codes)
----------------------------------
The project's color system is defined in `lib/constants/app_colors.dart`. Below are the main colors used (name, purpose, hex code):

- primaryGreen — primary brand color (buttons, app bar): #059669 (0xFF059669)
- lightGreen — light background/accents: #D1FAE5 (0xFFD1FAE5)
- darkGreen — darker accent/shadows: #047857 (0xFF047857)
- accentGreen — complementary green used in accents and tags: #10B981 (0xFF10B981)

- techBlue — accent (feature icons/gradients): #0EA5E9 (0xFF0EA5E9)
- lightTechBlue — light blue background for cards/accents: #E0F2FE (0xFFE0F2FE)

- cleanWhite — primary white used for surfaces: #FEFEFE (0xFFFEFEFE)
- ecoGray — subtle background / muted surfaces: #F1F5F9 (0xFFF1F5F9)

- backgroundColor — overall scaffold background: #F8FFFE (0xFFF8FFFE)
- cardBackground — card surface color (uses `Colors.white` in code)
- surfaceColor — alternative surface shade: #F0FDF4 (0xFFF0FDF4)

- primaryText — main text color: #0F172A (0xFF0F172A)
- secondaryText — secondary/metadata text color: #475569 (0xFF475569)
- lightText — helper text / hints: #64748B (0xFF64748B)
- ecoText — thematic green text for eco labels: #065F46 (0xFF065F46)

- Gradients (used in feature cards / decorations):
	- sustainabilityGradientStart: #059669 (0xFF059669)
	- sustainabilityGradientEnd: #10B981 (0xFF10B981)
	- innovationGradientStart: #0EA5E9 (0xFF0EA5E9)
	- innovationGradientEnd: #06B6D4 (0xFF06B6D4)
	- efficiencyGradientStart: #8B5CF6 (0xFF8B5CF6)
	- efficiencyGradientEnd: #06B6D4 (0xFF06B6D4)
	- renewableGradientStart: #10B981 (0xFF10B981)
	- renewableGradientEnd: #84CC16 (0xFF84CC16)

- Status & accent colors:
	- notificationBadge (error/badge): #EF4444 (0xFFEF4444)
	- successGreen: #10B981 (0xFF10B981)
	- warningOrange: #F59E0B (0xFFF59E0B)
	- tagBackground: #10B981 (0xFF10B981)

- Other accents:
	- electricBlue: #3B82F6 (0xFF3B82F6)
	- cleanCyan: #06B6D4 (0xFF06B6D4)
	- natureGreen: #22C55E (0xFF22C55E)

Notes:
- Use `AppColors` constants from `lib/constants/app_colors.dart` when styling widgets to keep the theme consistent.
- Gradients and decorations are provided in `AppStyles` so prefer those for feature cards to keep consistent corner radiuses and shadows.

Screens (pages)
---------------
- `lib/screens/home_screen.dart` - Main app screen. Combines header, feature cards grid, "near you" section and the custom bottom navigation. Handles navigation to the camera page via the bottom nav or feature cards.
- `lib/screens/camera_page.dart` - Camera UI. Uses the `camera` plugin to display live preview, capture photos, save them to application documents directory and fetch current location using `LocationService`. After capture it navigates to `PhotoPreviewPage`.
- `lib/screens/photo_preview_page.dart` - Shows the captured photo and displays location info. Allows user to retake or proceed to `ComplaintDetailsPage`.
- `lib/screens/complaint_details_page.dart` - Final complaint detail form. Shows photo and location, allows user to edit/select AI-classified tag (preset list), enter text description or record a voice message with the `VoiceRecorderWidget`, and submit the complaint (simulated). On successful submit shows a success dialog and returns to `HomeScreen`.

- `lib/screens/issues_map_page.dart` - (New) Map view showing active complaints as map markers. Uses `flutter_map` + OpenStreetMap tile layer and displays marker details in a bottom card. Currently reads dummy data from `DummyDataService`.

Widgets (reusable UI components)
--------------------------------
- `lib/widgets/header_section.dart` - Top header area with greeting, user avatar, and location (retrieved via `LocationService`). Shows a notification icon and gradient background.
- `lib/widgets/feature_card.dart` - Single feature card UI used in the grid (icon, title, description). Accepts an `onTap` handler.
- `lib/widgets/feature_cards_grid.dart` - Layout of the two-by-two feature cards (Report Issue, Issues near me, My Complaints, Alerts & News). Tapping Report Issue navigates to camera.
- `lib/widgets/near_you_section.dart` - Example card showing a nearby issue with tag, user name and time. Shows "View all" action placeholder.
- `lib/widgets/custom_bottom_nav.dart` - Custom bottom navigation bar with five items and a special center camera button. Used across screens to switch tabs and open camera.
- `lib/widgets/voice_recorder_widget.dart` - UI for recording voice messages, showing recording duration, playback, and delete. Uses `VoiceRecordingService` for native recording and `audioplayers` for playback.

Services (logic & platform integrations)
--------------------------------------
- `lib/services/location_service.dart` - Uses `geolocator`, `geocoding` and `permission_handler` to request location permission, fetch device coordinates and convert to a human-readable address (placemark). Provides `getCurrentLocation()` and `requestLocationPermission()`.
- `lib/services/voice_recording_service.dart` - Provides a wrapper around native recording using platform channels (`MethodChannel` and `EventChannel`) to start/stop recordings. Saves files into application documents directory as `.m4a`. Also uses `permission_handler` to request microphone permission. Note: native platform channel implementation is required in the `android/` and `ios/` native code for `voice_recording` channel.

Other project parts
-------------------
- `lib/widgets/custom_*` and small UI components are used by multiple screens. The UI follows a green/eco theme using `AppColors` and `AppStyles`.
- `android/` and `ios/` must include the needed runtime permissions in their manifests/entitlements (camera, microphone, location, storage) to enable camera, voice and geolocation features.

Notes and important implementation details
----------------------------------------
- Voice recording is implemented via platform channels. Check `android/` and `ios/` native code for a `MethodChannel` handler named `voice_recording`. If missing, recording will fail; the Flutter layer expects a native implementation to handle start/stop recording.
- Location retrieval uses `geolocator` and `geocoding`; ensure platform-specific setup (Android `AndroidManifest.xml` permissions and iOS Info.plist keys) are present.
- Camera usage uses the `camera` plugin which requires proper initialization and permissions on each platform.
- The complaint submission is currently simulated (delayed Future); integrate backend API here if you wish to persist complaints.

How to extend or inspect
------------------------
- To add new UI screens: create `lib/screens/<new_page>.dart` and wire navigation via `Navigator.push` or named routes in `main.dart`.
- To provide native voice recording implementation: add platform-specific code that handles the `voice_recording` channel and writes audio files to the provided path.
- To persist complaints: implement an API client service (e.g., `lib/services/api_service.dart`) and call it from `ComplaintDetailsPage._submitComplaint()`.

Files not exhaustively listed
----------------------------
This summary focuses on the main app files under `lib/` and top-level project manifests. There are additional generated build files and platform code under `android/`, `ios/`, `build/`, and other platform runner folders. If you want a complete, line-by-line index of every file, tell me and I will generate a more exhaustive listing.

End of Detail.txt
